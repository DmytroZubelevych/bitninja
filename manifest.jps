type: update
version: 6.0.1
name: BitNinja Service----
logo: images/logo.png
homepage: https://bitninja.io/

baseUrl: https://raw.githubusercontent.com/jelastic-jps/bitninja/main

onBeforeInit: |
  var resp = jelastic.dev.scripting.Eval("a498b13745283f7f3dbab7a31ed7d348", session, "wizard.ui", {
    groupType: "${account.groupType:}",
    uid: "${user.uid}"
  });
  return resp.response ? resp.response:resp;

description:
  short: BitNinja All-in-One Server Protection

buttons:
  - caption: BitNinja Admin Panel
    href: https://admin.bitninja.io/site/login
  - confirmText: Restart BitNinja agent?
    loadingText: Restarting BitNinja agent...
    action: restartBitNinja
    caption: Restart Agent
    successText: BitNinja agent has been restarted.

targetNodes:
  nodeType:
    - tomcat6
    - tomcat7
    - tomcat8
    - tomcat85
    - tomcat9
    - tomcat
    - tomee
    - tomee-dockerized
    - glassfish3
    - glassfish4
    - glassfish
    - jetty
    - jetty6
    - apache
    - apache2
    - nginxphp
    - apache2-ruby
    - nginx-ruby
    - nginx
    - nginx-dockerized
    - nginxphp-dockerized
    - haproxy
    - apache-lb
    - varnish
    - varnish-dockerized
    - payara
    - wildfly
    - nodejs
    - apache-ruby
    - apache-python
    - nginxruby
    - litespeedphp
    - litespeedadc
    - lemp
    - llsmp
    - jenkins
    - jenkins2
    - kubernetes
    - storage
    - mariadb
    - mariadb10
    - mariadb-dockerized
    - mysql
    - mysql5
    - postgresql
    - postgres9
    - postgres10
    - postgres11
    - postgres12
    - postgres13
    - postgres14

globals:
  action: /etc/bitninja/jelastic_action
  WAFConfig: /etc/bitninja/WAFManager/config.ini
  EXTEND_PERM: /etc/jelastic/extendperm.conf

onAfterServiceScaleOut:
  - if ('${event.params.nodeGroup}' == '${targetNodes.nodeGroup}'):
    - forEach(node:event.response.nodes):
        manageWAFModule:
          nodeid: ${@node.id}

onAfterSetExtIpCount:
  if (${event.response.result:1} == 0):
    manageWAFModule:
      nodeid: ${event.params.nodeid}

onAfterAttachExtIp:
  if (${event.response.result:1} == 0):
    manageWAFModule:
      nodeid: ${event.params.nodeid}

onBeforeDetachExtIp:
  - env.control.GetNodeInfo[${event.params.nodeid}]
  - if ('${response.node.nodeGroup}' == '${targetNodes.nodeGroup}'):
      disableWAF:
        nodeid: ${response.node.id}

onInstall: setupBitninja

actions:
  setupBitninja:
    - checkExtIPs

  checkExtIPs:
    - if ('${this.nodeid:}'):
      - if (${targetNodes.extips.length:false}):
          configureWAF:
            type: ipv4
            nodeid: ${this.nodeid:}
      - elif (${targetNodes.extipsv6.length:false}):
          configureWAF:
            type: ipv6
            nodeid: ${this.nodeid:}
    - else:
        forEach(node:env.nodes):
          if ('${@node.nodeGroup}' == '${targetNodes.nodeGroup}'):
            - if (${@node.extips.length:false}):
                configureWAF:
                  type: ipv4
                  nodeid: ${@node.id:}
            - elif (${@node.extipsv6.length:false}):
                configureWAF:
                  type: ipv6
                  nodeid: ${@node.id:}

  manageWAFModule:
    - env.control.GetNodeInfo[${this.nodeid}]:
    - if ('${response.node.nodeGroup}' == '${targetNodes.nodeGroup}'):
        if ('${response.node.extips:false}' == 'false' && '${response.node.extipsv6:false}' == 'false'):
          disableWAF:
            nodeid: "${response.node.id}"
        else:
          checkExtIPs:
            nodeid: "${response.node.id}"

  configureWAF:
    cmd [${this.nodeid}]: |-
      echo "is configureWAF action"
    user: root

  disableWAF:
    cmd [${this.nodeid}]: |-
      echo "is disableWAF action"
    user: root
